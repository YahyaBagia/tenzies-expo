{"version":3,"sources":["src/common/GlobalState.js","src/common/Utils.js","src/common/Const.js","src/components/Dice.jsx","src/components/Timer.jsx","src/SettingsModal.jsx","src/Main.jsx","App.jsx","assets/Sounds/Dice_Click.wav","assets/Sounds/Game_Finished.wav","assets/splash.png"],"names":["DiceTypes","initialState","soundEnabled","diceType","createGlobalState","useGlobalState","getGlobalState","setGlobalState","CacheStateLocally","a","async","cacheableState","JSON","stringify","AsyncStorage","setItem","LoadLocallyCachedState","currentState","stateKeys","Object","keys","getItem","strLocallyCachedState","locallyCachedState","parse","undefined","key","v","Utils","SplitArray","flatArray","numCols","newArray","c","push","i","length","Sleep","seconds","Promise","resolve","reject","setTimeout","PlaySound","audio","Audio","Sound","createAsync","sound","playAsync","IsOnWeb","Platform","OS","Colors","Sounds","Dice_Click","require","Game_Finished","Images","Splash","DiceDigit","title","diceFontSize","isCompact","Text","style","fontSize","fontWeight","DiceSymbol","dotSize","one","two","position","top","left","bottom","right","two_mirror","two_middle","three","four","five","six","View","height","width","justifyContent","alignItems","DiceDot","borderRadius","backgroundColor","Dice","isSelected","onPress","diceSize","overflow","TouchableRipple","borderColor","borderWidth","Timer","tHours","tMinutes","tSeconds","formatNumber","n","slice","marginTop","textAlign","SettingsModal","isVisible","onDismiss","Portal","Dialog","visible","maxWidth","alignSelf","marginVertical","marginHorizontal","Actions","Title","flex","marginLeft","Content","Divider","flexDirection","map","dT","value","SegmentedControlTab","values","selectedIndex","onTabPress","tabStyle","tabsContainerStyle","activeTabStyle","tabTextStyle","color","Main","CreateANewDice","Math","ceil","random","id","nanoid","SetNewDices","Array","useStopwatch","minutes","hours","startTimer","start","pauseTimer","pause","resetTimer","reset","useState","allDices","setAllDices","noOfRolls","setNoOfRolls","isSettingsVisible","setIsSettingsVisible","leftConfettiRef","useRef","rightConfettiRef","getSelectedDices","filter","die","useEffect","selectedDices","resetNoOfRolls","CheckIfAllDicesAreTheSame","startConfettis","current","allSelected","every","firstValue","allSame","margin","diceElements","index","firstSelectedDice","oldDices","onPressDie","GetDiceElements","dices","minWidth","oldNoOfRolls","oldDice","count","origin","x","y","autoStart","ref","onAnimationEnd","fadeOut","Dimensions","get","borderTopLeftRadius","borderBottomLeftRadius","IconButton","icon","marginRight","size","theme","DefaultTheme","colors","primary","accent","App","isGlobalStateLoaded","setIsGlobalStateLoaded","SplashScreen","StatusBar","Image","source","resizeMode","module","exports"],"mappings":"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","file":"static/js/app.6fbd96cd.chunk.js","sourcesContent":["import { createGlobalState } from \"react-hooks-global-state\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport const DiceTypes = [\"Digit\", \"Symbol\"];\n\nconst initialState = {\n  soundEnabled: true,\n  diceType: DiceTypes[0],\n};\n\nconst CACHED_STATE = \"CACHED_STATE\";\n\nconst { useGlobalState, getGlobalState, setGlobalState } =\n  createGlobalState(initialState);\n\n//#region - Cachable Global State\n\nexport const SetSoundEnabled = (value) => {\n  setGlobalState(\"soundEnabled\", (v) => value);\n  CacheStateLocally();\n};\n\nexport const SetDiceType = (value) => {\n  setGlobalState(\"diceType\", (v) => value);\n  CacheStateLocally();\n};\n\n//#endregion\n\n//#region - Persisting Global State\n\nconst CacheStateLocally = async () => {\n  let cacheableState = {\n    soundEnabled: getGlobalState(\"soundEnabled\"),\n    diceType: getGlobalState(\"diceType\"),\n  };\n  cacheableState = JSON.stringify(cacheableState);\n  await AsyncStorage.setItem(CACHED_STATE, cacheableState);\n};\n\nexport const LoadLocallyCachedState = async () => {\n  let currentState = { ...initialState };\n  const stateKeys = Object.keys(initialState);\n  const strLocallyCachedState = await AsyncStorage.getItem(CACHED_STATE);\n  const locallyCachedState = JSON.parse(strLocallyCachedState);\n  if (locallyCachedState !== null || locallyCachedState !== undefined) {\n    currentState = { ...currentState, ...locallyCachedState };\n  }\n\n  for (const key of stateKeys) setGlobalState(key, (v) => currentState[key]);\n\n  return true;\n};\n\n//#endregion\n\nexport { useGlobalState, getGlobalState, setGlobalState };\n","import { Platform } from \"react-native\";\nimport { Audio } from \"expo-av\";\nimport { getGlobalState } from \"./GlobalState\";\n\nexport default class Utils {\n  static SplitArray = (flatArray, numCols) => {\n    const newArray = [];\n    for (let c = 0; c < numCols; c++) {\n      newArray.push([]);\n    }\n    for (let i = 0; i < flatArray.length; i++) {\n      const mod = i % numCols;\n      newArray[mod].push(flatArray[i]);\n    }\n    return newArray;\n  };\n\n  static Sleep = (seconds = 1) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, seconds * 1000);\n    });\n  };\n\n  static PlaySound = async (audio) => {\n    const soundEnabled = getGlobalState(\"soundEnabled\");\n    if (!soundEnabled) return;\n    const { sound } = await Audio.Sound.createAsync(audio);\n    await sound.playAsync();\n  };\n\n  static IsOnWeb = () => Platform.OS === \"web\";\n}\n","export const Colors = {\n  Primary: \"#F1C232\",\n  Accent: \"#596183\",\n  Highlight: \"#F29432\",\n  ButtonBG: \"#0A2038\",\n};\n\nexport const Sounds = {\n  Dice_Click: require(\"../../assets/Sounds/Dice_Click.wav\"),\n  Game_Finished: require(\"../../assets/Sounds/Game_Finished.wav\"),\n};\n\nexport const Images = {\n  Splash: require(\"../../assets/splash.png\"),\n};\n","import { View } from \"react-native\";\nimport { Text, TouchableRipple } from \"react-native-paper\";\n\nimport { Colors } from \"../common/Const\";\nimport { DiceTypes } from \"../common/GlobalState\";\n\nconst Dice = ({ title, isSelected, onPress, isCompact, diceType }) => {\n  const diceSize = isCompact ? 50 : 70;\n  return (\n    <View style={{ overflow: \"hidden\", borderRadius: 12 }}>\n      <TouchableRipple\n        onPress={onPress}\n        style={{\n          borderRadius: 12,\n          backgroundColor: isSelected ? Colors.Highlight : \"white\",\n          borderColor: Colors.Highlight,\n          borderWidth: 3,\n          height: diceSize,\n          width: diceSize,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        {diceType === DiceTypes[0] ? (\n          <DiceDigit title={title} isCompact={isCompact} />\n        ) : (\n          <DiceSymbol title={title} isCompact={isCompact} />\n        )}\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst DiceDigit = ({ title, isCompact }) => {\n  const diceFontSize = isCompact ? 32 : 45;\n  return (\n    <Text style={{ fontSize: diceFontSize, fontWeight: \"bold\" }}>{title}</Text>\n  );\n};\n\nconst DiceSymbol = ({ title, isCompact }) => {\n  const dotSize = isCompact ? 10 : 15;\n\n  const one = <DiceDot dotSize={dotSize} />;\n  const two = (\n    <>\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", top: 0, left: 0 }}\n      />\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", bottom: 0, right: 0 }}\n      />\n    </>\n  );\n  const two_mirror = (\n    <>\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", top: 0, right: 0 }}\n      />\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", bottom: 0, left: 0 }}\n      />\n    </>\n  );\n  const two_middle = (\n    <>\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", right: 0 }}\n      />\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", left: 0 }}\n      />\n    </>\n  )\n  const three = (\n    <>\n      {one}\n      {two}\n    </>\n  );\n  const four = (\n    <>\n      {two}\n      {two_mirror}\n    </>\n  )\n  const five = (\n    <>\n      {one}\n      {four}\n    </>\n  )\n  const six = (\n    <>\n      {four}\n      {two_middle}\n    </>\n  )\n\n  return (\n    <View\n      style={{\n        height: \"90%\",\n        width: \"90%\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      {title === \"1\" && one}\n      {title === \"2\" && two}\n      {title === \"3\" && three}\n      {title === \"4\" && four}\n      {title === \"5\" && five}\n      {title === \"6\" && six}\n    </View>\n  );\n};\n\nconst DiceDot = ({ dotSize, style }) => (\n  <View\n    style={{\n      borderRadius: dotSize / 2,\n      height: dotSize,\n      width: dotSize,\n      backgroundColor: Colors.ButtonBG,\n      ...style,\n    }}\n  />\n);\n\nexport default Dice;\n","import { View } from \"react-native\";\nimport { Text } from \"react-native-paper\";\n\nconst Timer = ({ tHours, tMinutes, tSeconds }) => {\n  const formatNumber = (n) => (\"0\" + n).slice(-2);\n  return (\n    <View style={{ marginTop: 12 }}>\n      <Text style={{ textAlign: \"center\", fontSize: 28, fontWeight: \"bold\" }}>\n        {formatNumber(tHours)}:{formatNumber(tMinutes)}:{formatNumber(tSeconds)}\n      </Text>\n    </View>\n  );\n};\n\nexport default Timer;\n","import { View } from \"react-native\";\nimport {\n  Dialog,\n  Divider,\n  IconButton,\n  Portal,\n  Text,\n  Title,\n} from \"react-native-paper\";\nimport SegmentedControlTab from \"react-native-segmented-control-tab\";\n\nimport Dice from \"./components/Dice\";\n\nimport { Colors } from \"./common/Const\";\nimport {\n  DiceTypes,\n  useGlobalState,\n  SetDiceType,\n  SetSoundEnabled,\n} from \"./common/GlobalState\";\n\nconst SettingsModal = ({ isVisible, onDismiss }) => {\n  const [diceType] = useGlobalState(\"diceType\");\n  const [soundEnabled] = useGlobalState(\"soundEnabled\");\n\n  return (\n    <Portal>\n      <Dialog\n        visible={isVisible}\n        onDismiss={onDismiss}\n        style={{\n          maxWidth: 470,\n          width: \"85%\",\n          alignSelf: \"center\",\n          marginVertical: 20,\n          marginHorizontal: 15,\n          backgroundColor: Colors.Primary,\n        }}\n      >\n        <Dialog.Actions>\n          <Title\n            style={{\n              flex: 1,\n              marginLeft: 10,\n              fontSize: 26,\n              fontWeight: \"bold\",\n              textAlign: \"center\",\n            }}\n          >\n            Settings\n          </Title>\n        </Dialog.Actions>\n        <Dialog.Content>\n          <Divider />\n          <View\n            style={{\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              marginTop: 12,\n            }}\n          >\n            <Text style={{ flex: 1, fontSize: 21, fontWeight: \"bold\" }}>\n              Dice Type\n            </Text>\n            {DiceTypes.map((dT, i) => (\n              <>\n                <Dice\n                  title={\"5\"}\n                  isSelected={diceType === dT}\n                  onPress={() => SetDiceType(dT)}\n                  isCompact\n                  diceType={dT}\n                  key={dT}\n                />\n                {i !== DiceTypes.length - 1 && <View style={{ width: 12 }} key={`${i}`} />}\n              </>\n            ))}\n          </View>\n\n          <View\n            style={{\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              marginTop: 12,\n            }}\n          >\n            <Text style={{ fontSize: 21, fontWeight: \"bold\" }}>Sound</Text>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n              <SegmentedControlTab\n                values={[\"On\", \"Off\"]}\n                selectedIndex={soundEnabled ? 0 : 1}\n                onTabPress={(i) => SetSoundEnabled(i === 0)}\n                borderRadius={12}\n                tabStyle={{ borderWidth: 3, borderColor: Colors.Highlight }}\n                tabsContainerStyle={{ width: 112 }}\n                activeTabStyle={{ backgroundColor: Colors.ButtonBG }}\n                tabTextStyle={{\n                  color: Colors.ButtonBG,\n                  fontWeight: \"bold\",\n                  fontSize: 26,\n                }}\n              />\n            </View>\n          </View>\n        </Dialog.Content>\n      </Dialog>\n    </Portal>\n  );\n};\n\nexport default SettingsModal;\n","import { useState, useRef, useEffect } from \"react\";\nimport { View, Dimensions } from \"react-native\";\nimport { IconButton, Text, TouchableRipple } from \"react-native-paper\";\nimport ConfettiCannon from \"react-native-confetti-cannon\";\nimport { useStopwatch } from \"react-timer-hook\";\nimport \"react-native-get-random-values\";\nimport { nanoid } from \"nanoid\";\n\nimport Utils from \"./common/Utils\";\nimport { Colors, Sounds } from \"./common/Const\";\n\nimport Dice from \"./components/Dice\";\nimport Timer from \"./components/Timer\";\n\nimport SettingsModal from \"./SettingsModal\";\nimport { useGlobalState } from \"./common/GlobalState\";\n\nconst NumberOfDices = 12;\n\n//TODO: Settings Modal to be added -> Theme Selector, Number/DiceDots View & Sound On/Off\n//TODO: Sounds to be added\n//TODO: expo-fonts to be integrated\n//TODO: Show rolls counter\n//TODO: Show missed rolls (where selected number was there but user Rolled-away)\n//TODO: Save no of rolls & time taken to local storage and show scores table\n\nconst Main = () => {\n  const CreateANewDice = () => ({\n    title: `${Math.ceil(Math.random() * 6)}`,\n    isSelected: false,\n    id: nanoid(),\n  });\n\n  const SetNewDices = () =>\n    [...Array(NumberOfDices)].map(() => CreateANewDice());\n\n  const {\n    seconds: tSeconds,\n    minutes: tMinutes,\n    hours: tHours,\n    start: startTimer,\n    pause: pauseTimer,\n    reset: resetTimer,\n  } = useStopwatch({});\n\n  const [allDices, setAllDices] = useState(SetNewDices());\n  const [noOfRolls, setNoOfRolls] = useState(0);\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n\n  const [diceType] = useGlobalState(\"diceType\");\n\n  const leftConfettiRef = useRef();\n  const rightConfettiRef = useRef();\n\n  const getSelectedDices = () => allDices.filter((die) => die.isSelected);\n\n  useEffect(() => {\n    const selectedDices = getSelectedDices();\n    if (selectedDices.length === 0) {\n      resetNoOfRolls();\n      resetTimer();\n      pauseTimer();\n    } else if (selectedDices.length === 1) {\n      resetTimer();\n      startTimer();\n    } else if (CheckIfAllDicesAreTheSame()) {\n      Utils.PlaySound(Sounds.Game_Finished);\n      startConfettis();\n      pauseTimer();\n    }\n  }, [allDices]);\n\n  const increaseNoOfRolls = () => {\n    setNoOfRolls((oldNoOfRolls) => oldNoOfRolls + 1);\n  };\n\n  const resetNoOfRolls = () => setNoOfRolls(0);\n\n  const startConfettis = () => {\n    leftConfettiRef.current.start();\n    rightConfettiRef.current.start();\n  };\n\n  const onPressRoll = () => {\n    if (getSelectedDices().length > 0) {\n      increaseNoOfRolls();\n    }\n    setAllDices((oldDice) =>\n      oldDice.map((die) => (die.isSelected ? die : CreateANewDice()))\n    );\n  };\n\n  const onPressNewGame = () => {\n    setAllDices(SetNewDices());\n    resetTimer();\n  };\n\n  const onPressDie = ({ id, title }) => {\n    if (CheckIfAllDicesAreTheSame()) return;\n    Utils.PlaySound(Sounds.Dice_Click);\n    const [firstSelectedDice] = allDices.filter(({ isSelected }) => isSelected);\n    if (firstSelectedDice) {\n      if (title !== firstSelectedDice.title) return;\n    }\n    setAllDices((oldDices) =>\n      oldDices.map((die) =>\n        die.id === id ? { ...die, isSelected: !die.isSelected } : die\n      )\n    );\n  };\n\n  const CheckIfAllDicesAreTheSame = () => {\n    const allSelected = allDices.every((die) => die.isSelected);\n    const firstValue = allDices[0].title;\n    const allSame = allDices.every((die) => die.title === firstValue);\n    return allSelected && allSame;\n  };\n\n  const GetDiceElements = () => {\n    const diceElements = allDices.map(({ id, title, isSelected }, index) => (\n      <Dice\n        key={id}\n        title={title}\n        isSelected={isSelected}\n        onPress={() => onPressDie(allDices[index])}\n        diceType={diceType}\n      />\n    ));\n\n    let splittedArrays = [];\n    if (Utils.IsOnWeb()) {\n      splittedArrays = Utils.SplitArray(diceElements, 2);\n    } else {\n      splittedArrays = Utils.SplitArray(diceElements, 4);\n    }\n    return splittedArrays;\n  };\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: Colors.Primary,\n      }}\n    >\n      <View\n        style={{\n          justifyContent: \"center\",\n          width: Utils.IsOnWeb() ? undefined : \"90%\",\n        }}\n      >\n        <View style={{ margin: 12 }}>\n          <Text\n            style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: 50 }}\n          >\n            Tenzies\n          </Text>\n          <Text\n            style={{\n              textAlign: \"center\",\n              fontWeight: \"bold\",\n              fontSize: 20,\n              marginTop: 8,\n            }}\n          >\n            Roll until all dice are the same.{\"\\n\"}Click each die to freeze it\n            at its current value between rolls.\n          </Text>\n          <Timer {...{ tHours, tMinutes, tSeconds }} />\n        </View>\n\n        <View style={{ alignItems: \"center\" }}>\n          {GetDiceElements().map((dices, i) => (\n            <View\n              style={{\n                flexDirection: \"row\",\n                justifyContent: \"space-around\",\n                marginVertical: 8,\n                minWidth: Utils.IsOnWeb() ? 400 : \"100%\",\n                maxWidth: 650,\n                width: \"100%\",\n              }}\n              key={`${i}`}\n            >\n              {dices}\n            </View>\n          ))}\n        </View>\n\n        <Text\n          style={{\n            textAlign: \"center\",\n            fontSize: 28,\n            fontWeight: \"bold\",\n            marginTop: 12,\n          }}\n        >\n          {noOfRolls} Rolls\n        </Text>\n\n        <View\n          style={{\n            overflow: \"hidden\",\n            borderRadius: 12,\n            marginTop: 20,\n          }}\n        >\n          <TouchableRipple\n            style={{\n              borderRadius: 12,\n              backgroundColor: Colors.ButtonBG,\n              height: 60,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n            onPress={CheckIfAllDicesAreTheSame() ? onPressNewGame : onPressRoll}\n          >\n            <Text style={{ color: \"white\", fontSize: 30, fontWeight: \"bold\" }}>\n              {CheckIfAllDicesAreTheSame() ? \"New Game\" : \"ROLL\"}\n            </Text>\n          </TouchableRipple>\n        </View>\n      </View>\n      {CheckIfAllDicesAreTheSame() && (\n        <>\n          <ConfettiCannon\n            count={50}\n            origin={{ x: 100, y: 100 }}\n            autoStart={true}\n            ref={leftConfettiRef}\n            onAnimationEnd={startConfettis}\n            fadeOut={true}\n          />\n          <ConfettiCannon\n            count={50}\n            origin={{ x: Dimensions.get(\"window\").width - 100, y: 100 }}\n            autoStart={true}\n            ref={rightConfettiRef}\n            onAnimationEnd={startConfettis}\n            fadeOut={true}\n          />\n        </>\n      )}\n      <SettingsModal\n        isVisible={isSettingsVisible}\n        onDismiss={() => setIsSettingsVisible(false)}\n      />\n      <View\n        style={{\n          position: \"absolute\",\n          top: 38,\n          right: 0,\n          backgroundColor: Colors.Highlight,\n          borderTopLeftRadius: 12,\n          borderBottomLeftRadius: 12,\n        }}\n      >\n        <IconButton\n          icon={\"cog\"}\n          color={Colors.ButtonBG}\n          onPress={() => setIsSettingsVisible(true)}\n          style={{ margin: 0, marginRight: 12 }}\n          size={30}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default Main;\n","import { useEffect, useState } from \"react\";\nimport { View, Image } from \"react-native\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { Provider as PaperProvider, DefaultTheme } from \"react-native-paper\";\nimport * as SplashScreen from \"expo-splash-screen\";\n\nimport Main from \"./src/Main\";\nimport Utils from \"./src/common/Utils\";\nimport { Colors, Images } from \"./src/common/Const\";\nimport { LoadLocallyCachedState } from \"./src/common/GlobalState\";\n\nconst theme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: Colors.Primary,\n    accent: Colors.Accent,\n  },\n};\n\nconst App = () => {\n  const [isGlobalStateLoaded, setIsGlobalStateLoaded] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      await SplashScreen.preventAutoHideAsync();\n      await LoadLocallyCachedState();\n      await Utils.Sleep(2);\n      setIsGlobalStateLoaded(true)\n      await SplashScreen.hideAsync();\n    })()\n  }, [])\n\n  if (!isGlobalStateLoaded)\n    return (\n      <View style={{ flex: 1, backgroundColor: Colors.Primary }}>\n        <Image\n          source={Images.Splash}\n          style={{ height: \"100%\", width: \"100%\" }}\n          resizeMode={\"contain\"}\n        />\n      </View>\n    );\n\n  return (\n    <PaperProvider theme={theme}>\n      <Main />\n      <StatusBar style=\"auto\" />\n    </PaperProvider>\n  )\n};\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/Dice_Click.e8c6c391.wav\";","module.exports = __webpack_public_path__ + \"static/media/Game_Finished.9b5b1a62.wav\";","module.exports = __webpack_public_path__ + \"static/media/splash.6444b62c.png\";"],"sourceRoot":""}