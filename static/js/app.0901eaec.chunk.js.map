{"version":3,"sources":["src/common/GlobalState.js","src/common/Utils.js","src/common/ScoreUtils.js","src/common/Const.js","src/components/Dice.jsx","src/ScoresModal.jsx","src/SettingsModal.jsx","src/common/CustomHooks.js","src/Main.jsx","App.jsx","assets/Sounds/Roll_Dice.mp3","assets/Sounds/Dice_Click.wav","assets/Sounds/Game_Finished.wav","assets/splash.png"],"names":["DiceTypes","initialState","noOfDices","soundEnabled","diceType","createGlobalState","useGlobalState","getGlobalState","setGlobalState","SetNoOfDices","value","v","CacheStateLocally","a","async","cacheableState","JSON","stringify","AsyncStorage","setItem","LoadLocallyCachedState","currentState","stateKeys","Object","keys","getItem","strLocallyCachedState","locallyCachedState","parse","undefined","key","Utils","SplitArray","flatArray","numCols","newArray","c","push","i","length","Sleep","seconds","Promise","resolve","reject","setTimeout","PlaySound","audio","Audio","Sound","createAsync","sound","playAsync","IsOnWeb","Platform","OS","GetTimerText","tHours","tMinutes","tSeconds","twoDigitNumber","n","slice","formattedTime","GetTotalSecondsOfTimer","Number","ScoreUtils","GetAllScores","strScores","AddNewScore","time","noOfRolls","selectedDice","scoreObj","id","nanoid","totalSeconds","allScores","SaveScores","DeleteScore","newScores","filter","ClearAllScores","arrScores","Colors","Sounds","Roll_Dice","require","Dice_Click","Game_Finished","Images","Splash","DiceDigit","title","diceFontSize","isCompact","Text","style","fontSize","fontWeight","DiceSymbol","dotSize","one","two","position","top","left","bottom","right","two_mirror","two_middle","three","four","five","six","View","height","width","justifyContent","alignItems","DiceDot","borderRadius","backgroundColor","Dice","isSelected","onPress","diceSize","overflow","TouchableRipple","borderColor","borderWidth","arrNoOfDices","ScoreItem","index","timeTaken","flexDirection","marginVertical","padding","halfWidth","flex","ScoreItemText","textAlign","marginHorizontal","ScoresModal","isVisible","onDismiss","useState","scores","setScores","selectedNoOfDices","setSelectedNoOfDices","useEffect","loadScores","s","sortedScores","sort","b","Portal","Dialog","visible","maxWidth","maxHeight","alignSelf","Actions","Title","marginLeft","Divider","ScrollArea","SegmentedControlTab","values","map","selectedIndex","indexOf","onTabPress","tabStyle","activeTabStyle","tabTextStyle","color","FlatList","data","renderItem","item","keyExtractor","ListHeaderComponent","SettingsModal","marginBottom","Content","dT","tabsContainerStyle","icon","StepperButton","IconButton","size","margin","useUpdateEffect","effect","dependencies","isInitialMount","useRef","current","Main","CreateDice","Math","ceil","random","GenerateNewDices","Array","useStopwatch","minutes","hours","startTimer","start","pauseTimer","pause","resetTimer","reset","noOfRows","setNoOfRows","allDices","setAllDices","setNoOfRolls","isSettingsVisible","setIsSettingsVisible","isScoresVisible","setIsScoresVisible","leftConfettiRef","rightConfettiRef","getSelectedDices","die","selectedDices","resetNoOfRolls","CheckIfAllDicesAreTheSame","startConfettis","calculateNoOfRows","onPressRoll","oldNoOfRolls","oldDice","onPressNewGame","allSelected","every","firstValue","allSame","Dimensions","get","onLayout","l","nativeEvent","layout","marginTop","diceElements","firstSelectedDice","oldDices","onPressDie","GetDiceElements","dices","minWidth","count","origin","x","y","autoStart","ref","onAnimationEnd","fadeOut","borderTopLeftRadius","borderBottomLeftRadius","marginRight","borderTopRightRadius","borderBottomRightRadius","theme","DefaultTheme","colors","primary","accent","App","isGlobalStateLoaded","setIsGlobalStateLoaded","SplashScreen","StatusBar","Image","source","resizeMode","module","exports"],"mappings":"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","file":"static/js/app.0901eaec.chunk.js","sourcesContent":["import { createGlobalState } from \"react-hooks-global-state\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport const DiceTypes = [\"Digit\", \"Symbol\"];\n\nconst initialState = {\n  noOfDices: 12,\n  soundEnabled: true,\n  diceType: DiceTypes[0],\n};\n\nconst CACHED_STATE = \"CACHED_STATE\";\n\nconst { useGlobalState, getGlobalState, setGlobalState } =\n  createGlobalState(initialState);\n\n//#region - Cachable Global State\n\nexport const SetNoOfDices = (value) => {\n  setGlobalState(\"noOfDices\", (v) => value);\n  CacheStateLocally();\n};\n\nexport const SetSoundEnabled = (value) => {\n  setGlobalState(\"soundEnabled\", (v) => value);\n  CacheStateLocally();\n};\n\nexport const SetDiceType = (value) => {\n  setGlobalState(\"diceType\", (v) => value);\n  CacheStateLocally();\n};\n\n//#endregion\n\n//#region - Persisting Global State\n\nconst CacheStateLocally = async () => {\n  let cacheableState = {\n    noOfDices: getGlobalState(\"noOfDices\"),\n    soundEnabled: getGlobalState(\"soundEnabled\"),\n    diceType: getGlobalState(\"diceType\"),\n  };\n  cacheableState = JSON.stringify(cacheableState);\n  await AsyncStorage.setItem(CACHED_STATE, cacheableState);\n};\n\nexport const LoadLocallyCachedState = async () => {\n  let currentState = { ...initialState };\n  const stateKeys = Object.keys(initialState);\n  const strLocallyCachedState = await AsyncStorage.getItem(CACHED_STATE);\n  const locallyCachedState = JSON.parse(strLocallyCachedState);\n  if (locallyCachedState !== null || locallyCachedState !== undefined) {\n    currentState = { ...currentState, ...locallyCachedState };\n  }\n\n  for (const key of stateKeys) setGlobalState(key, (v) => currentState[key]);\n\n  return true;\n};\n\n//#endregion\n\nexport { useGlobalState, getGlobalState, setGlobalState };\n","import { Platform } from \"react-native\";\nimport { Audio } from \"expo-av\";\n\nimport { getGlobalState } from \"./GlobalState\";\n\nexport default class Utils {\n  static SplitArray = (flatArray, numCols) => {\n    const newArray = [];\n    for (let c = 0; c < numCols; c++) {\n      newArray.push([]);\n    }\n    for (let i = 0; i < flatArray.length; i++) {\n      const mod = i % numCols;\n      newArray[mod].push(flatArray[i]);\n    }\n    return newArray;\n  };\n\n  static Sleep = (seconds = 1) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, seconds * 1000);\n    });\n  };\n\n  static PlaySound = async (audio) => {\n    try {\n      const soundEnabled = getGlobalState(\"soundEnabled\");\n      if (!soundEnabled) return;\n      const { sound } = await Audio.Sound.createAsync(audio);\n      await sound.playAsync();\n    } catch {}\n  };\n\n  static IsOnWeb = () => Platform.OS === \"web\";\n\n  //#region\n  static GetTimerText = ({ tHours, tMinutes, tSeconds }) => {\n    const twoDigitNumber = (n) => (\"0\" + n).slice(-2);\n    let formattedTime =\n      twoDigitNumber(tMinutes) + \":\" + twoDigitNumber(tSeconds);\n    if (tHours > 0) {\n      formattedTime = twoDigitNumber(tHours) + \":\" + formattedTime;\n    }\n    return formattedTime;\n  };\n\n  static GetTotalSecondsOfTimer = ({ tHours, tMinutes, tSeconds }) => {\n    const hSeconds = Number(tHours) * 3600;\n    const mSeconds = Number(tMinutes) * 60;\n    const sSeconds = Number(tSeconds);\n    const totalSeconds = hSeconds + mSeconds + sSeconds;\n    return totalSeconds;\n  };\n  //#endregion\n}\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport \"react-native-get-random-values\";\nimport { nanoid } from \"nanoid\";\nimport Utils from \"./Utils\";\n\nconst SCORE_STORAGE_KEY = \"SCORES\";\n\nexport default class ScoreUtils {\n  static GetAllScores = async () => {\n    let strScores = await AsyncStorage.getItem(SCORE_STORAGE_KEY);\n    if (!strScores) strScores = \"[]\";\n    return JSON.parse(strScores);\n  };\n\n  static AddNewScore = async (\n    time,\n    noOfRolls,\n    selectedDice,\n    diceType,\n    noOfDices\n  ) => {\n    const scoreObj = {\n      id: nanoid(),\n      time,\n      noOfRolls,\n      selectedDice,\n      totalSeconds: Utils.GetTotalSecondsOfTimer(time),\n      diceType,\n      noOfDices,\n    };\n    const allScores = await ScoreUtils.GetAllScores();\n    allScores.push(scoreObj);\n    await ScoreUtils.SaveScores(allScores);\n  };\n\n  static DeleteScore = async (scoreObj) => {\n    const allScores = await ScoreUtils.GetAllScores();\n    const newScores = allScores.filter(({ id }) => id !== scoreObj.id);\n    await ScoreUtils.SaveScores(newScores);\n  };\n\n  static ClearAllScores = async () => {\n    await ScoreUtils.SaveScores([]);\n  };\n\n  static SaveScores = async (arrScores) => {\n    const strScores = JSON.stringify(arrScores);\n    await AsyncStorage.setItem(SCORE_STORAGE_KEY, strScores);\n  };\n}\n","export const Colors = {\n  Primary: \"#F1C232\",\n  Accent: \"#596183\",\n  Highlight: \"#F29432\",\n  ButtonBG: \"#0A2038\",\n};\n\nexport const Sounds = {\n  Roll_Dice: require(\"../../assets/Sounds/Roll_Dice.mp3\"),\n  Dice_Click: require(\"../../assets/Sounds/Dice_Click.wav\"),\n  Game_Finished: require(\"../../assets/Sounds/Game_Finished.wav\"),\n};\n\nexport const Images = {\n  Splash: require(\"../../assets/splash.png\"),\n};\n","import { View } from \"react-native\";\nimport { Text, TouchableRipple } from \"react-native-paper\";\n\nimport { Colors } from \"../common/Const\";\nimport { DiceTypes } from \"../common/GlobalState\";\n\nconst Dice = ({ title, isSelected, onPress, isCompact, diceType }) => {\n  const diceSize = isCompact ? 40 : 70;\n  return (\n    <View style={{ overflow: \"hidden\", borderRadius: 12 }}>\n      <TouchableRipple\n        onPress={onPress}\n        style={{\n          borderRadius: 12,\n          backgroundColor: isSelected ? Colors.Highlight : \"white\",\n          borderColor: Colors.Highlight,\n          borderWidth: 3,\n          height: diceSize,\n          width: diceSize,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        {diceType === DiceTypes[0] ? (\n          <DiceDigit title={title} isCompact={isCompact} />\n        ) : (\n          <DiceSymbol title={title} isCompact={isCompact} />\n        )}\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst DiceDigit = ({ title, isCompact }) => {\n  const diceFontSize = isCompact ? 25 : 45;\n  return (\n    <Text style={{ fontSize: diceFontSize, fontWeight: \"bold\" }}>{title}</Text>\n  );\n};\n\nconst DiceSymbol = ({ title, isCompact }) => {\n  const dotSize = isCompact ? 8 : 15;\n\n  const one = <DiceDot dotSize={dotSize} />;\n  const two = (\n    <>\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", top: 0, left: 0 }}\n      />\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", bottom: 0, right: 0 }}\n      />\n    </>\n  );\n  const two_mirror = (\n    <>\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", top: 0, right: 0 }}\n      />\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", bottom: 0, left: 0 }}\n      />\n    </>\n  );\n  const two_middle = (\n    <>\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", right: 0 }}\n      />\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", left: 0 }}\n      />\n    </>\n  )\n  const three = (\n    <>\n      {one}\n      {two}\n    </>\n  );\n  const four = (\n    <>\n      {two}\n      {two_mirror}\n    </>\n  )\n  const five = (\n    <>\n      {one}\n      {four}\n    </>\n  )\n  const six = (\n    <>\n      {four}\n      {two_middle}\n    </>\n  )\n\n  return (\n    <View\n      style={{\n        height: \"90%\",\n        width: \"90%\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      {title === \"1\" && one}\n      {title === \"2\" && two}\n      {title === \"3\" && three}\n      {title === \"4\" && four}\n      {title === \"5\" && five}\n      {title === \"6\" && six}\n    </View>\n  );\n};\n\nconst DiceDot = ({ dotSize, style }) => (\n  <View\n    style={{\n      borderRadius: dotSize / 2,\n      height: dotSize,\n      width: dotSize,\n      backgroundColor: Colors.ButtonBG,\n      ...style,\n    }}\n  />\n);\n\nexport default Dice;\n","import { useEffect, useState } from \"react\";\nimport { FlatList, View } from \"react-native\";\nimport {\n  Dialog,\n  Divider,\n  Portal,\n  Text,\n  Title,\n  TouchableRipple,\n} from \"react-native-paper\";\nimport SegmentedControlTab from \"react-native-segmented-control-tab\";\n\nimport Dice from \"./components/Dice\";\n\nimport Utils from \"./common/Utils\";\nimport { Colors } from \"./common/Const\";\nimport ScoreUtils from \"./common/ScoreUtils\";\nimport { useGlobalState } from \"./common/GlobalState\";\n\nconst arrNoOfDices = [4, 6, 8, 10, 12];\n\nconst ScoresModal = ({ isVisible, onDismiss }) => {\n  const [diceType] = useGlobalState(\"diceType\");\n\n  const [scores, setScores] = useState([]);\n  const [selectedNoOfDices, setSelectedNoOfDices] = useState(\n    arrNoOfDices[arrNoOfDices.length - 1]\n  );\n\n  useEffect(() => {\n    if (isVisible) {\n      loadScores();\n    }\n  }, [isVisible]);\n\n  const loadScores = async () => {\n    const s = await ScoreUtils.GetAllScores();\n    const sortedScores = s.sort((a, b) => a.totalSeconds - b.totalSeconds);\n    setScores(sortedScores);\n  };\n\n  const onPressClearScoreboard = async () => {\n    await ScoreUtils.ClearAllScores();\n    await loadScores();\n  };\n\n  return (\n    <Portal>\n      <Dialog\n        visible={isVisible}\n        onDismiss={onDismiss}\n        style={{\n          maxWidth: 470,\n          maxHeight: 680,\n          width: \"92%\",\n          alignSelf: \"center\",\n          marginVertical: 20,\n          marginHorizontal: 15,\n          backgroundColor: Colors.Primary,\n        }}\n      >\n        <Dialog.Actions>\n          <Title\n            style={{\n              flex: 1,\n              marginLeft: 10,\n              fontSize: 26,\n              fontWeight: \"bold\",\n              textAlign: \"center\",\n            }}\n          >\n            Scoreboard\n          </Title>\n        </Dialog.Actions>\n        <Divider />\n        <Dialog.ScrollArea>\n          <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\n            <Dice title={\"5\"} isCompact diceType={diceType} />\n            <View style={{ flex: 1, marginHorizontal: 4 }}>\n              <SegmentedControlTab\n                values={arrNoOfDices.map((v) => `${v}`)}\n                selectedIndex={arrNoOfDices.indexOf(selectedNoOfDices)}\n                onTabPress={(i) => setSelectedNoOfDices(arrNoOfDices[i])}\n                borderRadius={12}\n                tabStyle={{ borderWidth: 3, borderColor: Colors.Highlight }}\n                activeTabStyle={{ backgroundColor: Colors.ButtonBG }}\n                tabTextStyle={{\n                  color: Colors.ButtonBG,\n                  fontWeight: \"bold\",\n                  fontSize: 20,\n                }}\n              />\n            </View>\n            <Dice title={\"5\"} isCompact diceType={diceType} />\n          </View>\n          <FlatList\n            data={scores.filter(\n              ({ noOfDices }) => noOfDices === selectedNoOfDices\n            )}\n            renderItem={({ item, index }) => (\n              <ScoreItem scoreObj={item} index={index} />\n            )}\n            keyExtractor={({ id }) => id}\n            ListHeaderComponent={() => (\n              <View\n                style={{\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                  marginVertical: 4,\n                  borderRadius: 12,\n                  borderWidth: 3,\n                  borderColor: Colors.ButtonBG,\n                  padding: 2,\n                }}\n              >\n                <ScoreItemText v={\"#\"} halfWidth />\n                <ScoreItemText v={\"Time\"} />\n                <ScoreItemText v={\"Rolls\"} />\n                <ScoreItemText v={\"Dice\"} />\n              </View>\n            )}\n          />\n        </Dialog.ScrollArea>\n        <Dialog.Actions>\n          <View\n            style={{\n              overflow: \"hidden\",\n              borderRadius: 12,\n              width: \"100%\",\n              maxWidth: 615,\n              alignSelf: \"center\",\n            }}\n          >\n            <TouchableRipple\n              style={{\n                borderRadius: 12,\n                backgroundColor: Colors.ButtonBG,\n                height: 46,\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n              onPress={onPressClearScoreboard}\n            >\n              <Text\n                style={{ color: \"white\", fontSize: 22, fontWeight: \"bold\" }}\n              >\n                Clear Scoreboard\n              </Text>\n            </TouchableRipple>\n          </View>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  );\n};\n\nconst ScoreItem = ({ scoreObj, index }) => {\n  const { id, time, noOfRolls, selectedDice, diceType } = scoreObj;\n  const timeTaken = Utils.GetTimerText(time);\n  return (\n    <View\n      style={{\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        marginVertical: 4,\n        borderRadius: 12,\n        borderWidth: 3,\n        borderColor: Colors.ButtonBG,\n        padding: 2,\n      }}\n    >\n      <ScoreItemText v={index + 1} halfWidth />\n      <ScoreItemText v={timeTaken} />\n      <ScoreItemText v={noOfRolls} />\n      <View style={{ flex: 1, alignItems: \"center\" }}>\n        <Dice diceType={diceType} isCompact title={selectedDice} />\n      </View>\n    </View>\n  );\n};\n\nconst ScoreItemText = ({ v, halfWidth = false }) => (\n  <Text\n    style={{\n      flex: halfWidth ? 0.5 : 1,\n      textAlign: \"center\",\n      fontWeight: \"bold\",\n      fontSize: 22,\n      marginHorizontal: 1,\n    }}\n  >\n    {v}\n  </Text>\n);\n\nexport default ScoresModal;\n","import { View } from \"react-native\";\nimport {\n  Dialog,\n  Divider,\n  IconButton,\n  Portal,\n  Text,\n  Title,\n} from \"react-native-paper\";\nimport SegmentedControlTab from \"react-native-segmented-control-tab\";\n\nimport Dice from \"./components/Dice\";\n\nimport { Colors } from \"./common/Const\";\nimport {\n  DiceTypes,\n  useGlobalState,\n  SetNoOfDices,\n  SetDiceType,\n  SetSoundEnabled,\n} from \"./common/GlobalState\";\n\nconst SettingsModal = ({ isVisible, onDismiss }) => {\n  const [noOfDices] = useGlobalState(\"noOfDices\");\n  const [diceType] = useGlobalState(\"diceType\");\n  const [soundEnabled] = useGlobalState(\"soundEnabled\");\n\n  const decreaseNoOfDices = () => {\n    if (noOfDices > 4) {\n      SetNoOfDices(noOfDices - 2);\n    }\n  };\n\n  const increaseNoOfDices = () => {\n    if (noOfDices < 12) {\n      SetNoOfDices(noOfDices + 2);\n    }\n  };\n\n  return (\n    <Portal>\n      <Dialog\n        visible={isVisible}\n        onDismiss={onDismiss}\n        style={{\n          maxWidth: 470,\n          width: \"85%\",\n          alignSelf: \"center\",\n          marginVertical: 20,\n          marginHorizontal: 15,\n          backgroundColor: Colors.Primary,\n        }}\n      >\n        <Dialog.Actions>\n          <Title\n            style={{\n              flex: 1,\n              marginLeft: 10,\n              fontSize: 26,\n              fontWeight: \"bold\",\n              textAlign: \"center\",\n            }}\n          >\n            Settings\n          </Title>\n        </Dialog.Actions>\n        <Divider style={{ marginBottom: 12 }} />\n        <Dialog.Content>\n          <View\n            style={{\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <Text style={{ flex: 1, fontSize: 21, fontWeight: \"bold\" }}>\n              Dice Type\n            </Text>\n            {DiceTypes.map((dT, i) => (\n              <>\n                <Dice\n                  title={\"5\"}\n                  isSelected={diceType === dT}\n                  onPress={() => SetDiceType(dT)}\n                  isCompact\n                  diceType={dT}\n                  key={dT}\n                />\n                {i !== DiceTypes.length - 1 && (\n                  <View style={{ width: 12 }} key={`${i}`} />\n                )}\n              </>\n            ))}\n          </View>\n          <Divider style={{ marginVertical: 12 }} />\n          <View\n            style={{\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <Text style={{ fontSize: 21, fontWeight: \"bold\" }}>Sound</Text>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n              <SegmentedControlTab\n                values={[\"On\", \"Off\"]}\n                selectedIndex={soundEnabled ? 0 : 1}\n                onTabPress={(i) => SetSoundEnabled(i === 0)}\n                borderRadius={12}\n                tabStyle={{ borderWidth: 3, borderColor: Colors.Highlight }}\n                tabsContainerStyle={{ width: 92 }}\n                activeTabStyle={{ backgroundColor: Colors.ButtonBG }}\n                tabTextStyle={{\n                  color: Colors.ButtonBG,\n                  fontWeight: \"bold\",\n                  fontSize: 20,\n                }}\n              />\n            </View>\n          </View>\n          <Divider style={{ marginVertical: 12 }} />\n          <View\n            style={{\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <Text style={{ fontSize: 21, fontWeight: \"bold\" }}>\n              No. of Dices\n            </Text>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n              <View\n                style={{\n                  borderWidth: 3,\n                  borderColor: Colors.Highlight,\n                  borderRadius: 12,\n                  backgroundColor: \"white\",\n                  flexDirection: \"row\",\n                  width: 92,\n                  height: 42,\n                  alignItems: \"center\",\n                  overflow: \"hidden\",\n                }}\n              >\n                <StepperButton icon={\"minus\"} onPress={decreaseNoOfDices} />\n                <Text\n                  style={{\n                    flex: 1,\n                    textAlign: \"center\",\n                    fontWeight: \"bold\",\n                    fontSize: 20,\n                  }}\n                >\n                  {noOfDices}\n                </Text>\n                <StepperButton icon={\"plus\"} onPress={increaseNoOfDices} />\n              </View>\n            </View>\n          </View>\n        </Dialog.Content>\n      </Dialog>\n    </Portal>\n  );\n};\n\nexport default SettingsModal;\n\nconst StepperButton = ({ icon, onPress }) => (\n  <View\n    style={{\n      flex: 1,\n      backgroundColor: Colors.ButtonBG,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100%\",\n    }}\n  >\n    <IconButton\n      icon={icon}\n      size={28}\n      onPress={onPress}\n      style={{ margin: 0 }}\n      color={Colors.Highlight}\n    />\n  </View>\n);\n","import { useEffect, useRef } from \"react\";\n\nconst useUpdateEffect = (effect, dependencies = []) => {\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      return effect();\n    }\n  }, dependencies);\n};\n\nexport default useUpdateEffect;\n","import { useState, useRef, useEffect } from \"react\";\nimport { View, Dimensions } from \"react-native\";\nimport { IconButton, Text, TouchableRipple } from \"react-native-paper\";\nimport ConfettiCannon from \"react-native-confetti-cannon\";\nimport { useStopwatch } from \"react-timer-hook\";\nimport \"react-native-get-random-values\";\nimport { nanoid } from \"nanoid\";\n\nimport Utils from \"./common/Utils\";\nimport ScoreUtils from \"./common/ScoreUtils\";\nimport { Colors, Sounds } from \"./common/Const\";\nimport { useGlobalState } from \"./common/GlobalState\";\n\nimport Dice from \"./components/Dice\";\n\nimport ScoresModal from \"./ScoresModal\";\nimport SettingsModal from \"./SettingsModal\";\nimport useUpdateEffect from \"./common/CustomHooks\";\n\n//TODO: expo-fonts to be integrated\n//TODO: Save noOfDices in the Score and display noOfDice-wise scores in ScoreModal\n//TODO: Show missed rolls (where selected number was there but user Rolled-away)\n\nconst Main = () => {\n  const [diceType] = useGlobalState(\"diceType\");\n  const [noOfDices] = useGlobalState(\"noOfDices\");\n\n  const CreateDice = () => ({\n    title: `${Math.ceil(Math.random() * 6)}`,\n    isSelected: false,\n    id: nanoid(),\n  });\n\n  const GenerateNewDices = () => [...Array(noOfDices)].map(() => CreateDice());\n\n  const {\n    seconds: tSeconds,\n    minutes: tMinutes,\n    hours: tHours,\n    start: startTimer,\n    pause: pauseTimer,\n    reset: resetTimer,\n  } = useStopwatch({});\n\n  const [noOfRows, setNoOfRows] = useState(2);\n  const [allDices, setAllDices] = useState(GenerateNewDices());\n  const [noOfRolls, setNoOfRolls] = useState(0);\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [isScoresVisible, setIsScoresVisible] = useState(false);\n\n  const leftConfettiRef = useRef();\n  const rightConfettiRef = useRef();\n\n  const getSelectedDices = () => allDices.filter((die) => die.isSelected);\n\n  useEffect(() => {\n    const selectedDices = getSelectedDices();\n    if (selectedDices.length === 0) {\n      resetNoOfRolls();\n      resetTimer();\n      pauseTimer();\n    } else if (selectedDices.length === 1) {\n      resetTimer();\n      startTimer();\n    } else if (CheckIfAllDicesAreTheSame()) {\n      Utils.PlaySound(Sounds.Game_Finished);\n      startConfettis();\n      pauseTimer();\n      ScoreUtils.AddNewScore(\n        { tHours, tMinutes, tSeconds },\n        noOfRolls,\n        selectedDices[0].title,\n        diceType,\n        noOfDices\n      );\n    }\n  }, [allDices]);\n\n  useUpdateEffect(() => {\n    setAllDices(GenerateNewDices());\n    pauseTimer();\n    resetTimer();\n    calculateNoOfRows();\n  }, [noOfDices]);\n\n  const increaseNoOfRolls = () => {\n    setNoOfRolls((oldNoOfRolls) => oldNoOfRolls + 1);\n  };\n\n  const resetNoOfRolls = () => setNoOfRolls(0);\n\n  const startConfettis = () => {\n    leftConfettiRef.current.start();\n    rightConfettiRef.current.start();\n  };\n\n  const onPress_NewGame_or_Roll = () => {\n    CheckIfAllDicesAreTheSame() ? onPressNewGame() : onPressRoll();\n  };\n\n  const onPressRoll = () => {\n    Utils.PlaySound(Sounds.Roll_Dice);\n    const selectedDices = getSelectedDices();\n    if (selectedDices.length > 0) {\n      increaseNoOfRolls();\n    }\n    setAllDices((oldDice) =>\n      oldDice.map((die) => (die.isSelected ? die : CreateDice()))\n    );\n  };\n\n  const onPressNewGame = () => {\n    setAllDices(GenerateNewDices());\n    resetTimer();\n  };\n\n  const onPressDie = ({ id, title }) => {\n    if (CheckIfAllDicesAreTheSame()) return;\n    Utils.PlaySound(Sounds.Dice_Click);\n    const [firstSelectedDice] = allDices.filter(({ isSelected }) => isSelected);\n    if (firstSelectedDice) {\n      if (title !== firstSelectedDice.title) return;\n    }\n    setAllDices((oldDices) =>\n      oldDices.map((die) =>\n        die.id === id ? { ...die, isSelected: !die.isSelected } : die\n      )\n    );\n  };\n\n  const CheckIfAllDicesAreTheSame = () => {\n    const allSelected = allDices.every((die) => die.isSelected);\n    const firstValue = allDices[0].title;\n    const allSame = allDices.every((die) => die.title === firstValue);\n    return allSelected && allSame;\n  };\n\n  const GetDiceElements = () => {\n    const diceElements = allDices.map(({ id, title, isSelected }, index) => (\n      <Dice\n        key={id}\n        title={title}\n        isSelected={isSelected}\n        onPress={() => onPressDie(allDices[index])}\n        diceType={diceType}\n      />\n    ));\n\n    let splittedArrays = [];\n    if (Utils.IsOnWeb()) {\n      splittedArrays = Utils.SplitArray(diceElements, 2);\n    } else {\n      splittedArrays = Utils.SplitArray(diceElements, 4);\n    }\n    splittedArrays = Utils.SplitArray(diceElements, noOfRows);\n    return splittedArrays;\n  };\n\n  const onLayoutRootView = (l) => {\n    const { width } = l.nativeEvent.layout;\n    calculateNoOfRows(width);\n  };\n\n  const calculateNoOfRows = (width = Dimensions.get(\"window\").width) => {\n    if (noOfDices === 10) {\n      if (width <= 480) {\n        setNoOfRows(5);\n      } else {\n        setNoOfRows(2);\n      }\n      return;\n    }\n    if (noOfDices === 4 || noOfDices === 6) {\n      setNoOfRows(2);\n    } else if (width <= 480) {\n      setNoOfRows(4);\n    } else if (width > 720) {\n      setNoOfRows(2);\n    }\n  };\n\n  //Rolls count does not work if we use SpaceBar to roll the dices.\n  // if (Utils.IsOnWeb()) {\n  //   const { useHotkeys } = require(\"react-hotkeys-hook\");\n  //   useHotkeys(\"space\", onPress_NewGame_or_Roll);\n  // }\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: Colors.Primary,\n      }}\n      onLayout={onLayoutRootView}\n    >\n      <View\n        style={{\n          justifyContent: \"center\",\n          width: \"90%\",\n        }}\n      >\n        <View style={{ margin: 12, alignItems: \"center\" }}>\n          <Text\n            style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: 50 }}\n          >\n            Tenzies\n          </Text>\n          <Text\n            style={{\n              textAlign: \"center\",\n              fontWeight: \"bold\",\n              fontSize: 20,\n              marginTop: 8,\n            }}\n          >\n            Roll until all dice are the same.{\"\\n\"}Click each die to freeze it\n            at its current value between rolls.\n          </Text>\n          <View\n            style={{\n              flexDirection: \"row\",\n              marginTop: 12,\n              width: \"100%\",\n              maxWidth: 480,\n            }}\n          >\n            <Text\n              style={{\n                flex: 1,\n                fontSize: 28,\n                textAlign: \"center\",\n                fontWeight: \"bold\",\n              }}\n            >\n              {Utils.GetTimerText({ tHours, tMinutes, tSeconds })}\n            </Text>\n            <Text\n              style={{\n                flex: 1,\n                fontSize: 28,\n                textAlign: \"center\",\n                fontWeight: \"bold\",\n              }}\n            >\n              {noOfRolls} Rolls\n            </Text>\n          </View>\n        </View>\n\n        <View style={{ alignItems: \"center\" }}>\n          {GetDiceElements().map((dices, i) => (\n            <View\n              style={{\n                flexDirection: \"row\",\n                justifyContent: \"space-around\",\n                marginVertical: 8,\n                minWidth: Utils.IsOnWeb() ? 400 : \"100%\",\n                maxWidth: 650,\n                width: \"100%\",\n              }}\n              key={`${i}`}\n            >\n              {dices}\n            </View>\n          ))}\n        </View>\n\n        <View\n          style={{\n            overflow: \"hidden\",\n            borderRadius: 12,\n            marginTop: 20,\n            width: \"100%\",\n            maxWidth: 615,\n            alignSelf: \"center\",\n          }}\n        >\n          <TouchableRipple\n            style={{\n              borderRadius: 12,\n              backgroundColor: Colors.ButtonBG,\n              height: 60,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n            onPress={onPress_NewGame_or_Roll}\n          >\n            <Text style={{ color: \"white\", fontSize: 30, fontWeight: \"bold\" }}>\n              {CheckIfAllDicesAreTheSame() ? \"New Game\" : \"ROLL\"}\n            </Text>\n          </TouchableRipple>\n        </View>\n      </View>\n      {CheckIfAllDicesAreTheSame() && (\n        <>\n          <ConfettiCannon\n            count={50}\n            origin={{ x: 100, y: 100 }}\n            autoStart={true}\n            ref={leftConfettiRef}\n            onAnimationEnd={startConfettis}\n            fadeOut={true}\n          />\n          <ConfettiCannon\n            count={50}\n            origin={{ x: Dimensions.get(\"window\").width - 100, y: 100 }}\n            autoStart={true}\n            ref={rightConfettiRef}\n            onAnimationEnd={startConfettis}\n            fadeOut={true}\n          />\n        </>\n      )}\n      <View\n        style={{\n          position: \"absolute\",\n          top: 38,\n          right: 0,\n          backgroundColor: Colors.Highlight,\n          borderTopLeftRadius: 12,\n          borderBottomLeftRadius: 12,\n          overflow: \"hidden\",\n        }}\n      >\n        <IconButton\n          icon={\"cog\"}\n          color={Colors.ButtonBG}\n          style={{ margin: 0, marginRight: 12 }}\n          size={30}\n          onPress={() => setIsSettingsVisible(true)}\n        />\n      </View>\n      <View\n        style={{\n          position: \"absolute\",\n          top: 38,\n          left: 0,\n          backgroundColor: Colors.Highlight,\n          borderTopRightRadius: 12,\n          borderBottomRightRadius: 12,\n          overflow: \"hidden\",\n        }}\n      >\n        <IconButton\n          icon={\"trophy\"}\n          color={Colors.ButtonBG}\n          style={{ margin: 0, marginLeft: 12 }}\n          size={30}\n          onPress={() => setIsScoresVisible(true)}\n        />\n      </View>\n      <ScoresModal\n        isVisible={isScoresVisible}\n        onDismiss={() => setIsScoresVisible(false)}\n      />\n      <SettingsModal\n        isVisible={isSettingsVisible}\n        onDismiss={() => setIsSettingsVisible(false)}\n      />\n    </View>\n  );\n};\n\nexport default Main;\n","import { useEffect, useState } from \"react\";\nimport { View, Image } from \"react-native\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { Provider as PaperProvider, DefaultTheme } from \"react-native-paper\";\nimport * as SplashScreen from \"expo-splash-screen\";\n\nimport Main from \"./src/Main\";\nimport Utils from \"./src/common/Utils\";\nimport { Colors, Images } from \"./src/common/Const\";\nimport { LoadLocallyCachedState } from \"./src/common/GlobalState\";\n\nconst theme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: Colors.Primary,\n    accent: Colors.Accent,\n  },\n};\n\nconst App = () => {\n  const [isGlobalStateLoaded, setIsGlobalStateLoaded] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      await SplashScreen.preventAutoHideAsync();\n      await LoadLocallyCachedState();\n      await Utils.Sleep(2);\n      setIsGlobalStateLoaded(true)\n      await SplashScreen.hideAsync();\n    })()\n  }, [])\n\n  if (!isGlobalStateLoaded)\n    return (\n      <View style={{ flex: 1, backgroundColor: Colors.Primary }}>\n        <Image\n          source={Images.Splash}\n          style={{ height: \"100%\", width: \"100%\" }}\n          resizeMode={\"contain\"}\n        />\n      </View>\n    );\n\n  return (\n    <PaperProvider theme={theme}>\n      <Main />\n      <StatusBar style=\"auto\" />\n    </PaperProvider>\n  )\n};\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/Roll_Dice.cb9e941e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Dice_Click.e8c6c391.wav\";","module.exports = __webpack_public_path__ + \"static/media/Game_Finished.9b5b1a62.wav\";","module.exports = __webpack_public_path__ + \"static/media/splash.32214774.png\";"],"sourceRoot":""}