{"version":3,"sources":["src/common/Const.js","src/components/Dice.js","src/components/Timer.js","src/common/Utils.js","src/Main.js","App.js"],"names":["Colors","Dice","title","isSelected","onPress","TouchableRipple","style","borderRadius","backgroundColor","borderColor","borderWidth","height","width","justifyContent","alignItems","Text","fontSize","fontWeight","Timer","forwardRef","props","ref","useState","seconds","setSeconds","timeIntervalRef","useRef","startTimer","current","setInterval","oldSeconds","pauseTimer","clearInterval","resetTimer","useImperativeHandle","textAlign","Date","toISOString","slice","Utils","SplitArray","flatArray","numCols","newArray","c","push","i","length","IsOnWeb","Platform","OS","Main","CreateANewDice","Math","ceil","random","id","nanoid","SetNewDices","Array","map","allDices","setAllDices","timerRef","leftConfettiRef","rightConfettiRef","useEffect","res","filter","die","CheckIfAllDicesAreTheSame","startConfettis","start","allSelected","every","firstValue","allSame","View","flex","undefined","margin","marginTop","marginVertical","diceElements","index","firstSelectedDice","oldDices","onPressDie","GetDiceElements","dices","flexDirection","minWidth","maxWidth","oldDice","color","count","origin","x","y","autoStart","onAnimationEnd","fadeOut","Dimensions","get","theme","DefaultTheme","colors","primary","accent","App","StatusBar"],"mappings":"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","file":"static/js/app.3c273851.chunk.js","sourcesContent":["export const Colors = {\n  Primary: \"#F1C232\",\n  Accent: \"#596183\",\n  HighlightDice: \"#F29432\",\n  ButtonBG: \"#0A2038\"\n};\n","import { TouchableRipple, Text } from \"react-native-paper\";\n\nimport { Colors } from \"../common/Const\";\n\nconst Dice = ({ title, isSelected, onPress }) => (\n  <TouchableRipple\n    onPress={onPress}\n    style={{\n      borderRadius: 12,\n      backgroundColor: isSelected ? Colors.HighlightDice : \"white\",\n      borderColor: Colors.HighlightDice,\n      borderWidth: 3,\n      height: 70,\n      width: 70,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    }}\n  >\n    <Text style={{ fontSize: 45, fontWeight: \"bold\" }}>{title}</Text>\n  </TouchableRipple>\n);\n\nexport default Dice;\n","import { useState, forwardRef, useImperativeHandle, useRef } from \"react\";\nimport { Text } from \"react-native-paper\";\n\nconst Timer = forwardRef((props, ref) => {\n  const [seconds, setSeconds] = useState(0);\n\n  const timeIntervalRef = useRef();\n\n  const formatTimeString = () => {\n    const date = new Date(seconds * 1000);\n    const isoString = date.toISOString();\n    const result = isoString.slice(14, 19);\n    return result;\n  };\n\n  const startTimer = () => {\n    timeIntervalRef.current = setInterval(() => {\n      setSeconds((oldSeconds) => oldSeconds + 1);\n    }, 1000);\n  };\n\n  const pauseTimer = () => {\n    clearInterval(timeIntervalRef.current);\n  };\n\n  const resetTimer = () => {\n    clearInterval(timeIntervalRef.current);\n    setSeconds(0);\n  };\n\n  useImperativeHandle(ref, () => ({ startTimer, pauseTimer, resetTimer }), []);\n\n  return (\n    <Text\n      style={{\n        textAlign: \"center\",\n        fontSize: 22,\n        fontWeight: \"bold\",\n      }}\n    >\n      {formatTimeString()}\n    </Text>\n  );\n});\n\nexport default Timer;\n","import { Platform } from \"react-native\";\n\nexport default class Utils {\n  static SplitArray = (flatArray, numCols) => {\n    const newArray = [];\n    for (let c = 0; c < numCols; c++) {\n      newArray.push([]);\n    }\n    for (let i = 0; i < flatArray.length; i++) {\n      const mod = i % numCols;\n      newArray[mod].push(flatArray[i]);\n    }\n    return newArray;\n  };\n\n  static IsOnWeb = () => Platform.OS === \"web\";\n}\n","import { useState, useRef, useEffect } from \"react\";\nimport { View, Dimensions } from \"react-native\";\nimport { Text, TouchableRipple } from \"react-native-paper\";\nimport ConfettiCannon from \"react-native-confetti-cannon\";\nimport \"react-native-get-random-values\";\nimport { nanoid } from \"nanoid\";\n\nimport Dice from \"./components/Dice\";\nimport Timer from \"./components/Timer\";\n\nimport { Colors } from \"./common/Const\";\nimport Utils from \"./common/Utils\";\n\nconst NumberOfDices = 12;\n\n//TODO: Settings Modal to be added -> Theme Selector & Number/DiceDots View\n//TODO: expo-fonts tobe integrated\n\nconst Main = () => {\n  const CreateANewDice = () => ({\n    title: `${Math.ceil(Math.random() * 6)}`,\n    isSelected: false,\n    id: nanoid(),\n  });\n  const SetNewDices = () =>\n    [...Array(NumberOfDices)].map(() => CreateANewDice());\n\n  const [allDices, setAllDices] = useState(SetNewDices());\n\n  const timerRef = useRef();\n\n  const leftConfettiRef = useRef();\n  const rightConfettiRef = useRef();\n\n  useEffect(() => {\n    const res = allDices.filter((die) => die.isSelected);\n    if (res.length === 0) {\n      timerRef.current.resetTimer();\n    } else if (res.length === 1) {\n      timerRef.current.startTimer();\n    } else if (CheckIfAllDicesAreTheSame()) {\n      startConfettis();\n      timerRef.current.pauseTimer();\n    }\n  }, [allDices]);\n\n  const startConfettis = () => {\n    leftConfettiRef.current.start();\n    rightConfettiRef.current.start();\n  };\n\n  const onPressRoll = () => {\n    setAllDices((oldDice) =>\n      oldDice.map((die) => (die.isSelected ? die : CreateANewDice()))\n    );\n  };\n\n  const onPressNewGame = () => {\n    setAllDices(SetNewDices());\n    timerRef.current.resetTimer();\n  };\n\n  const onPressDie = ({ id, title }) => {\n    if (CheckIfAllDicesAreTheSame()) return;\n    const [firstSelectedDice] = allDices.filter(({ isSelected }) => isSelected);\n    if (firstSelectedDice) {\n      if (title !== firstSelectedDice.title) return;\n    }\n    setAllDices((oldDices) =>\n      oldDices.map((die) =>\n        die.id === id ? { ...die, isSelected: !die.isSelected } : die\n      )\n    );\n  };\n\n  const CheckIfAllDicesAreTheSame = () => {\n    const allSelected = allDices.every((die) => die.isSelected);\n    const firstValue = allDices[0].title;\n    const allSame = allDices.every((die) => die.title === firstValue);\n    return allSelected && allSame;\n  };\n\n  const GetDiceElements = () => {\n    const diceElements = allDices.map(({ id, title, isSelected }, index) => (\n      <Dice\n        key={id}\n        title={title}\n        isSelected={isSelected}\n        onPress={() => onPressDie(allDices[index])}\n      />\n    ));\n\n    let splittedArrays = [];\n    if (Utils.IsOnWeb()) {\n      splittedArrays = Utils.SplitArray(diceElements, 2);\n    } else {\n      splittedArrays = Utils.SplitArray(diceElements, 4);\n    }\n    return splittedArrays;\n  };\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: Colors.Primary,\n      }}\n    >\n      <View\n        style={{\n          justifyContent: \"center\",\n          width: Utils.IsOnWeb() ? undefined : \"90%\",\n        }}\n      >\n        <View style={{ margin: 12 }}>\n          <Text\n            style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: 50 }}\n          >\n            Tenzies\n          </Text>\n          <Text\n            style={{\n              textAlign: \"center\",\n              fontWeight: \"bold\",\n              fontSize: 20,\n              marginTop: 8,\n            }}\n          >\n            Roll until all dice are the same.{\"\\n\"}Click each die to freeze it\n            at its current value between rolls.\n          </Text>\n          <View style={{ margin: 12 }}>\n            <Timer ref={timerRef} />\n          </View>\n        </View>\n\n        <View style={{ alignItems: \"center\", marginVertical: 28 }}>\n          {GetDiceElements().map((dices, i) => (\n            <View\n              style={{\n                flexDirection: \"row\",\n                justifyContent: \"space-around\",\n                marginVertical: 8,\n                minWidth: Utils.IsOnWeb() ? 400 : \"100%\",\n                maxWidth: 650,\n                width: \"100%\",\n              }}\n              key={`${i}`}\n            >\n              {dices}\n            </View>\n          ))}\n        </View>\n        <TouchableRipple\n          style={{\n            borderRadius: 12,\n            backgroundColor: Colors.ButtonBG,\n            height: 60,\n            marginTop: 20,\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n          onPress={CheckIfAllDicesAreTheSame() ? onPressNewGame : onPressRoll}\n        >\n          <Text style={{ color: \"white\", fontSize: 30 }}>\n            {CheckIfAllDicesAreTheSame() ? \"New Game\" : \"Roll\"}\n          </Text>\n        </TouchableRipple>\n      </View>\n      {CheckIfAllDicesAreTheSame() && (\n        <>\n          <ConfettiCannon\n            count={50}\n            origin={{ x: 100, y: 100 }}\n            autoStart={true}\n            ref={leftConfettiRef}\n            onAnimationEnd={startConfettis}\n            fadeOut={true}\n          />\n          <ConfettiCannon\n            count={50}\n            origin={{ x: Dimensions.get(\"window\").width - 100, y: 100 }}\n            autoStart={true}\n            ref={rightConfettiRef}\n            onAnimationEnd={startConfettis}\n            fadeOut={true}\n          />\n        </>\n      )}\n    </View>\n  );\n};\n\nexport default Main;\n","import { StatusBar } from \"expo-status-bar\";\nimport { Provider as PaperProvider, DefaultTheme } from \"react-native-paper\";\n\nimport Main from \"./src/Main\";\nimport { Colors } from \"./src/common/Const\";\n\nconst theme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: Colors.Primary,\n    accent: Colors.Accent,\n  },\n};\n\nconst App = () => (\n  <PaperProvider theme={theme}>\n    <Main />\n    <StatusBar style=\"auto\" />\n  </PaperProvider>\n);\n\nexport default App;\n"],"sourceRoot":""}