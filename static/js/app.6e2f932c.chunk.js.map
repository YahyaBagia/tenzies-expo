{"version":3,"sources":["src/common/GlobalState.js","src/common/Utils.js","src/common/Const.js","src/components/Dice.jsx","src/common/ScoreUtils.js","src/ScoresModal.jsx","src/SettingsModal.jsx","src/Main.jsx","App.jsx","assets/Sounds/Roll_Dice.mp3","assets/Sounds/Dice_Click.wav","assets/Sounds/Game_Finished.wav","assets/splash.png"],"names":["DiceTypes","initialState","soundEnabled","diceType","createGlobalState","useGlobalState","getGlobalState","setGlobalState","CacheStateLocally","a","async","cacheableState","JSON","stringify","AsyncStorage","setItem","LoadLocallyCachedState","currentState","stateKeys","Object","keys","getItem","strLocallyCachedState","locallyCachedState","parse","undefined","key","v","Utils","SplitArray","flatArray","numCols","newArray","c","push","i","length","Sleep","seconds","Promise","resolve","reject","setTimeout","PlaySound","audio","Audio","Sound","createAsync","sound","playAsync","IsOnWeb","Platform","OS","GetTimerText","tHours","tMinutes","tSeconds","twoDigitNumber","n","slice","formattedTime","GetTotalSecondsOfTimer","Number","Colors","Sounds","Roll_Dice","require","Dice_Click","Game_Finished","Images","Splash","DiceDigit","title","diceFontSize","isCompact","Text","style","fontSize","fontWeight","DiceSymbol","dotSize","one","two","position","top","left","bottom","right","two_mirror","two_middle","three","four","five","six","View","height","width","justifyContent","alignItems","DiceDot","borderRadius","backgroundColor","Dice","isSelected","onPress","diceSize","overflow","TouchableRipple","borderColor","borderWidth","ScoreUtils","GetAllScores","strScores","AddNewScore","time","noOfRolls","selectedDice","scoreObj","id","nanoid","totalSeconds","allScores","SaveScores","DeleteScore","newScores","filter","ClearAllScores","arrScores","ScoreItem","index","timeTaken","flexDirection","marginVertical","padding","halfWidth","flex","ScoreItemText","textAlign","marginHorizontal","ScoresModal","isVisible","onDismiss","useState","scores","setScores","useEffect","loadScores","s","sortedScores","sort","b","Portal","Dialog","visible","maxWidth","alignSelf","Actions","Title","marginLeft","Divider","ScrollArea","FlatList","data","renderItem","item","keyExtractor","ListHeaderComponent","color","SettingsModal","Content","marginTop","map","dT","value","SegmentedControlTab","values","selectedIndex","onTabPress","tabStyle","tabsContainerStyle","activeTabStyle","tabTextStyle","Main","CreateANewDice","Math","ceil","random","SetNewDices","Array","useStopwatch","minutes","hours","startTimer","start","pauseTimer","pause","resetTimer","reset","noOfRows","setNoOfRows","allDices","setAllDices","setNoOfRolls","isSettingsVisible","setIsSettingsVisible","isScoresVisible","setIsScoresVisible","leftConfettiRef","useRef","rightConfettiRef","getSelectedDices","die","selectedDices","resetNoOfRolls","CheckIfAllDicesAreTheSame","startConfettis","current","onPressRoll","oldNoOfRolls","oldDice","onPressNewGame","allSelected","every","firstValue","allSame","onLayout","l","nativeEvent","layout","margin","diceElements","firstSelectedDice","oldDices","onPressDie","GetDiceElements","dices","minWidth","count","origin","x","y","autoStart","ref","onAnimationEnd","fadeOut","Dimensions","get","borderTopLeftRadius","borderBottomLeftRadius","IconButton","icon","marginRight","size","borderTopRightRadius","borderBottomRightRadius","theme","DefaultTheme","colors","primary","accent","App","isGlobalStateLoaded","setIsGlobalStateLoaded","SplashScreen","StatusBar","Image","source","resizeMode","module","exports"],"mappings":"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","file":"static/js/app.6e2f932c.chunk.js","sourcesContent":["import { createGlobalState } from \"react-hooks-global-state\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport const DiceTypes = [\"Digit\", \"Symbol\"];\n\nconst initialState = {\n  soundEnabled: true,\n  diceType: DiceTypes[0],\n};\n\nconst CACHED_STATE = \"CACHED_STATE\";\n\nconst { useGlobalState, getGlobalState, setGlobalState } =\n  createGlobalState(initialState);\n\n//#region - Cachable Global State\n\nexport const SetSoundEnabled = (value) => {\n  setGlobalState(\"soundEnabled\", (v) => value);\n  CacheStateLocally();\n};\n\nexport const SetDiceType = (value) => {\n  setGlobalState(\"diceType\", (v) => value);\n  CacheStateLocally();\n};\n\n//#endregion\n\n//#region - Persisting Global State\n\nconst CacheStateLocally = async () => {\n  let cacheableState = {\n    soundEnabled: getGlobalState(\"soundEnabled\"),\n    diceType: getGlobalState(\"diceType\"),\n  };\n  cacheableState = JSON.stringify(cacheableState);\n  await AsyncStorage.setItem(CACHED_STATE, cacheableState);\n};\n\nexport const LoadLocallyCachedState = async () => {\n  let currentState = { ...initialState };\n  const stateKeys = Object.keys(initialState);\n  const strLocallyCachedState = await AsyncStorage.getItem(CACHED_STATE);\n  const locallyCachedState = JSON.parse(strLocallyCachedState);\n  if (locallyCachedState !== null || locallyCachedState !== undefined) {\n    currentState = { ...currentState, ...locallyCachedState };\n  }\n\n  for (const key of stateKeys) setGlobalState(key, (v) => currentState[key]);\n\n  return true;\n};\n\n//#endregion\n\nexport { useGlobalState, getGlobalState, setGlobalState };\n","import { Platform } from \"react-native\";\nimport { Audio } from \"expo-av\";\n\nimport { getGlobalState } from \"./GlobalState\";\n\nexport default class Utils {\n  static SplitArray = (flatArray, numCols) => {\n    const newArray = [];\n    for (let c = 0; c < numCols; c++) {\n      newArray.push([]);\n    }\n    for (let i = 0; i < flatArray.length; i++) {\n      const mod = i % numCols;\n      newArray[mod].push(flatArray[i]);\n    }\n    return newArray;\n  };\n\n  static Sleep = (seconds = 1) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, seconds * 1000);\n    });\n  };\n\n  static PlaySound = async (audio) => {\n    try {\n      const soundEnabled = getGlobalState(\"soundEnabled\");\n      if (!soundEnabled) return;\n      const { sound } = await Audio.Sound.createAsync(audio);\n      await sound.playAsync();\n    } catch {}\n  };\n\n  static IsOnWeb = () => Platform.OS === \"web\";\n\n  //#region\n  static GetTimerText = ({ tHours, tMinutes, tSeconds }) => {\n    const twoDigitNumber = (n) => (\"0\" + n).slice(-2);\n    let formattedTime =\n      twoDigitNumber(tMinutes) + \":\" + twoDigitNumber(tSeconds);\n    if (tHours > 0) {\n      formattedTime = twoDigitNumber(tHours) + \":\" + formattedTime;\n    }\n    return formattedTime;\n  };\n\n  static GetTotalSecondsOfTimer = ({ tHours, tMinutes, tSeconds }) => {\n    const hSeconds = Number(tHours) * 3600;\n    const mSeconds = Number(tMinutes) * 60;\n    const sSeconds = Number(tSeconds);\n    const totalSeconds = hSeconds + mSeconds + sSeconds;\n    return totalSeconds;\n  };\n  //#endregion\n}\n","export const Colors = {\n  Primary: \"#F1C232\",\n  Accent: \"#596183\",\n  Highlight: \"#F29432\",\n  ButtonBG: \"#0A2038\",\n};\n\nexport const Sounds = {\n  Roll_Dice: require(\"../../assets/Sounds/Roll_Dice.mp3\"),\n  Dice_Click: require(\"../../assets/Sounds/Dice_Click.wav\"),\n  Game_Finished: require(\"../../assets/Sounds/Game_Finished.wav\"),\n};\n\nexport const Images = {\n  Splash: require(\"../../assets/splash.png\"),\n};\n","import { View } from \"react-native\";\nimport { Text, TouchableRipple } from \"react-native-paper\";\n\nimport { Colors } from \"../common/Const\";\nimport { DiceTypes } from \"../common/GlobalState\";\n\nconst Dice = ({ title, isSelected, onPress, isCompact, diceType }) => {\n  const diceSize = isCompact ? 50 : 70;\n  return (\n    <View style={{ overflow: \"hidden\", borderRadius: 12 }}>\n      <TouchableRipple\n        onPress={onPress}\n        style={{\n          borderRadius: 12,\n          backgroundColor: isSelected ? Colors.Highlight : \"white\",\n          borderColor: Colors.Highlight,\n          borderWidth: 3,\n          height: diceSize,\n          width: diceSize,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        {diceType === DiceTypes[0] ? (\n          <DiceDigit title={title} isCompact={isCompact} />\n        ) : (\n          <DiceSymbol title={title} isCompact={isCompact} />\n        )}\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst DiceDigit = ({ title, isCompact }) => {\n  const diceFontSize = isCompact ? 32 : 45;\n  return (\n    <Text style={{ fontSize: diceFontSize, fontWeight: \"bold\" }}>{title}</Text>\n  );\n};\n\nconst DiceSymbol = ({ title, isCompact }) => {\n  const dotSize = isCompact ? 10 : 15;\n\n  const one = <DiceDot dotSize={dotSize} />;\n  const two = (\n    <>\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", top: 0, left: 0 }}\n      />\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", bottom: 0, right: 0 }}\n      />\n    </>\n  );\n  const two_mirror = (\n    <>\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", top: 0, right: 0 }}\n      />\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", bottom: 0, left: 0 }}\n      />\n    </>\n  );\n  const two_middle = (\n    <>\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", right: 0 }}\n      />\n      <DiceDot\n        dotSize={dotSize}\n        style={{ position: \"absolute\", left: 0 }}\n      />\n    </>\n  )\n  const three = (\n    <>\n      {one}\n      {two}\n    </>\n  );\n  const four = (\n    <>\n      {two}\n      {two_mirror}\n    </>\n  )\n  const five = (\n    <>\n      {one}\n      {four}\n    </>\n  )\n  const six = (\n    <>\n      {four}\n      {two_middle}\n    </>\n  )\n\n  return (\n    <View\n      style={{\n        height: \"90%\",\n        width: \"90%\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      {title === \"1\" && one}\n      {title === \"2\" && two}\n      {title === \"3\" && three}\n      {title === \"4\" && four}\n      {title === \"5\" && five}\n      {title === \"6\" && six}\n    </View>\n  );\n};\n\nconst DiceDot = ({ dotSize, style }) => (\n  <View\n    style={{\n      borderRadius: dotSize / 2,\n      height: dotSize,\n      width: dotSize,\n      backgroundColor: Colors.ButtonBG,\n      ...style,\n    }}\n  />\n);\n\nexport default Dice;\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport \"react-native-get-random-values\";\nimport { nanoid } from \"nanoid\";\nimport Utils from \"./Utils\";\n\nconst SCORE_STORAGE_KEY = \"SCORES\";\n\nexport default class ScoreUtils {\n  static GetAllScores = async () => {\n    let strScores = await AsyncStorage.getItem(SCORE_STORAGE_KEY);\n    if (!strScores) strScores = \"[]\";\n    return JSON.parse(strScores);\n  };\n\n  static AddNewScore = async (time, noOfRolls, selectedDice, diceType) => {\n    const scoreObj = {\n      id: nanoid(),\n      time,\n      noOfRolls,\n      selectedDice,\n      totalSeconds: Utils.GetTotalSecondsOfTimer(time),\n      diceType,\n    };\n    const allScores = await ScoreUtils.GetAllScores();\n    allScores.push(scoreObj);\n    await ScoreUtils.SaveScores(allScores);\n  };\n\n  static DeleteScore = async (scoreObj) => {\n    const allScores = await ScoreUtils.GetAllScores();\n    const newScores = allScores.filter(({ id }) => id !== scoreObj.id);\n    await ScoreUtils.SaveScores(newScores);\n  };\n\n  static ClearAllScores = async () => {\n    await ScoreUtils.SaveScores([]);\n  };\n\n  static SaveScores = async (arrScores) => {\n    const strScores = JSON.stringify(arrScores);\n    await AsyncStorage.setItem(SCORE_STORAGE_KEY, strScores);\n  };\n}\n","import { useEffect, useState } from \"react\";\nimport { FlatList, View } from \"react-native\";\nimport {\n  Dialog,\n  Divider,\n  Portal,\n  Text,\n  Title,\n  TouchableRipple,\n} from \"react-native-paper\";\n\nimport Dice from \"./components/Dice\";\n\nimport Utils from \"./common/Utils\";\nimport { Colors } from \"./common/Const\";\nimport ScoreUtils from \"./common/ScoreUtils\";\n\nconst ScoresModal = ({ isVisible, onDismiss }) => {\n  const [scores, setScores] = useState([]);\n\n  useEffect(() => {\n    if (isVisible) {\n      loadScores();\n    }\n  }, [isVisible]);\n\n  const loadScores = async () => {\n    const s = await ScoreUtils.GetAllScores();\n    const sortedScores = s.sort((a, b) => a.totalSeconds - b.totalSeconds);\n    setScores(sortedScores);\n  };\n\n  const onPressClearScoreboard = async () => {\n    await ScoreUtils.ClearAllScores();\n    await loadScores();\n  };\n\n  return (\n    <Portal>\n      <Dialog\n        visible={isVisible}\n        onDismiss={onDismiss}\n        style={{\n          maxWidth: 470,\n          width: \"85%\",\n          alignSelf: \"center\",\n          marginVertical: 20,\n          marginHorizontal: 15,\n          backgroundColor: Colors.Primary,\n        }}\n      >\n        <Dialog.Actions>\n          <Title\n            style={{\n              flex: 1,\n              marginLeft: 10,\n              fontSize: 26,\n              fontWeight: \"bold\",\n              textAlign: \"center\",\n            }}\n          >\n            Scoreboard\n          </Title>\n        </Dialog.Actions>\n        <Divider />\n        <Dialog.ScrollArea>\n          <FlatList\n            data={scores}\n            renderItem={({ item, index }) => (\n              <ScoreItem scoreObj={item} index={index} />\n            )}\n            keyExtractor={({ id }) => id}\n            ListHeaderComponent={() => (\n              <View\n                style={{\n                  flexDirection: \"row\",\n                  alignItems: \"center\",\n                  marginVertical: 4,\n                  borderRadius: 12,\n                  borderWidth: 3,\n                  borderColor: Colors.ButtonBG,\n                  padding: 2,\n                }}\n              >\n                <ScoreItemText v={\"#\"} halfWidth />\n                <ScoreItemText v={\"Time\"} />\n                <ScoreItemText v={\"Rolls\"} />\n                <ScoreItemText v={\"Dice\"} />\n              </View>\n            )}\n          />\n        </Dialog.ScrollArea>\n        <Dialog.Actions>\n          <View\n            style={{\n              overflow: \"hidden\",\n              borderRadius: 12,\n              width: \"100%\",\n              maxWidth: 615,\n              alignSelf: \"center\",\n            }}\n          >\n            <TouchableRipple\n              style={{\n                borderRadius: 12,\n                backgroundColor: Colors.ButtonBG,\n                height: 46,\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n              onPress={onPressClearScoreboard}\n            >\n              <Text\n                style={{ color: \"white\", fontSize: 22, fontWeight: \"bold\" }}\n              >\n                Clear Scoreboard\n              </Text>\n            </TouchableRipple>\n          </View>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  );\n};\n\nconst ScoreItem = ({ scoreObj, index }) => {\n  const { id, time, noOfRolls, selectedDice, diceType } = scoreObj;\n  const timeTaken = Utils.GetTimerText(time);\n  return (\n    <View\n      style={{\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        marginVertical: 4,\n        borderRadius: 12,\n        borderWidth: 3,\n        borderColor: Colors.ButtonBG,\n        padding: 2,\n      }}\n    >\n      <ScoreItemText v={index + 1} halfWidth />\n      <ScoreItemText v={timeTaken} />\n      <ScoreItemText v={noOfRolls} />\n      <View style={{ flex: 1, alignItems: \"center\" }}>\n        <Dice diceType={diceType} isCompact title={selectedDice} />\n      </View>\n    </View>\n  );\n};\n\nconst ScoreItemText = ({ v, halfWidth = false }) => (\n  <Text\n    style={{\n      flex: halfWidth ? 0.5 : 1,\n      textAlign: \"center\",\n      fontWeight: \"bold\",\n      fontSize: 22,\n      marginHorizontal: 1,\n    }}\n  >\n    {v}\n  </Text>\n);\n\nexport default ScoresModal;\n","import { View } from \"react-native\";\nimport {\n  Dialog,\n  Divider,\n  Portal,\n  Text,\n  Title,\n} from \"react-native-paper\";\nimport SegmentedControlTab from \"react-native-segmented-control-tab\";\n\nimport Dice from \"./components/Dice\";\n\nimport { Colors } from \"./common/Const\";\nimport {\n  DiceTypes,\n  useGlobalState,\n  SetDiceType,\n  SetSoundEnabled,\n} from \"./common/GlobalState\";\n\nconst SettingsModal = ({ isVisible, onDismiss }) => {\n  const [diceType] = useGlobalState(\"diceType\");\n  const [soundEnabled] = useGlobalState(\"soundEnabled\");\n\n  return (\n    <Portal>\n      <Dialog\n        visible={isVisible}\n        onDismiss={onDismiss}\n        style={{\n          maxWidth: 470,\n          width: \"85%\",\n          alignSelf: \"center\",\n          marginVertical: 20,\n          marginHorizontal: 15,\n          backgroundColor: Colors.Primary,\n        }}\n      >\n        <Dialog.Actions>\n          <Title\n            style={{\n              flex: 1,\n              marginLeft: 10,\n              fontSize: 26,\n              fontWeight: \"bold\",\n              textAlign: \"center\",\n            }}\n          >\n            Settings\n          </Title>\n        </Dialog.Actions>\n        <Dialog.Content>\n          <Divider />\n          <View\n            style={{\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              marginTop: 12,\n            }}\n          >\n            <Text style={{ flex: 1, fontSize: 21, fontWeight: \"bold\" }}>\n              Dice Type\n            </Text>\n            {DiceTypes.map((dT, i) => (\n              <>\n                <Dice\n                  title={\"5\"}\n                  isSelected={diceType === dT}\n                  onPress={() => SetDiceType(dT)}\n                  isCompact\n                  diceType={dT}\n                  key={dT}\n                />\n                {i !== DiceTypes.length - 1 && <View style={{ width: 12 }} key={`${i}`} />}\n              </>\n            ))}\n          </View>\n\n          <View\n            style={{\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              marginTop: 12,\n            }}\n          >\n            <Text style={{ fontSize: 21, fontWeight: \"bold\" }}>Sound</Text>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n              <SegmentedControlTab\n                values={[\"On\", \"Off\"]}\n                selectedIndex={soundEnabled ? 0 : 1}\n                onTabPress={(i) => SetSoundEnabled(i === 0)}\n                borderRadius={12}\n                tabStyle={{ borderWidth: 3, borderColor: Colors.Highlight }}\n                tabsContainerStyle={{ width: 112 }}\n                activeTabStyle={{ backgroundColor: Colors.ButtonBG }}\n                tabTextStyle={{\n                  color: Colors.ButtonBG,\n                  fontWeight: \"bold\",\n                  fontSize: 26,\n                }}\n              />\n            </View>\n          </View>\n        </Dialog.Content>\n      </Dialog>\n    </Portal>\n  );\n};\n\nexport default SettingsModal;\n","import { useState, useRef, useEffect } from \"react\";\nimport { View, Dimensions } from \"react-native\";\nimport { IconButton, Text, TouchableRipple } from \"react-native-paper\";\nimport ConfettiCannon from \"react-native-confetti-cannon\";\nimport { useStopwatch } from \"react-timer-hook\";\nimport \"react-native-get-random-values\";\nimport { nanoid } from \"nanoid\";\n\nimport Utils from \"./common/Utils\";\nimport { Colors, Sounds } from \"./common/Const\";\n\nimport Dice from \"./components/Dice\";\n\nimport ScoresModal from \"./ScoresModal\";\nimport SettingsModal from \"./SettingsModal\";\nimport { useGlobalState } from \"./common/GlobalState\";\nimport ScoreUtils from \"./common/ScoreUtils\";\n\nconst NumberOfDices = 12;\n\n//TODO: expo-fonts to be integrated\n//TODO: Show missed rolls (where selected number was there but user Rolled-away)\n\nconst Main = () => {\n  const CreateANewDice = () => ({\n    title: `${Math.ceil(Math.random() * 6)}`,\n    isSelected: false,\n    id: nanoid(),\n  });\n\n  const SetNewDices = () =>\n    [...Array(NumberOfDices)].map(() => CreateANewDice());\n\n  const {\n    seconds: tSeconds,\n    minutes: tMinutes,\n    hours: tHours,\n    start: startTimer,\n    pause: pauseTimer,\n    reset: resetTimer,\n  } = useStopwatch({});\n\n  const [noOfRows, setNoOfRows] = useState(2);\n  const [allDices, setAllDices] = useState(SetNewDices());\n  const [noOfRolls, setNoOfRolls] = useState(0);\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [isScoresVisible, setIsScoresVisible] = useState(false);\n\n  const [diceType] = useGlobalState(\"diceType\");\n\n  const leftConfettiRef = useRef();\n  const rightConfettiRef = useRef();\n\n  const getSelectedDices = () => allDices.filter((die) => die.isSelected);\n\n  useEffect(() => {\n    const selectedDices = getSelectedDices();\n    if (selectedDices.length === 0) {\n      resetNoOfRolls();\n      resetTimer();\n      pauseTimer();\n    } else if (selectedDices.length === 1) {\n      resetTimer();\n      startTimer();\n    } else if (CheckIfAllDicesAreTheSame()) {\n      Utils.PlaySound(Sounds.Game_Finished);\n      startConfettis();\n      pauseTimer();\n      ScoreUtils.AddNewScore(\n        { tHours, tMinutes, tSeconds },\n        noOfRolls,\n        selectedDices[0].title,\n        diceType\n      );\n    }\n  }, [allDices]);\n\n  const increaseNoOfRolls = () => {\n    setNoOfRolls((oldNoOfRolls) => oldNoOfRolls + 1);\n  };\n\n  const resetNoOfRolls = () => setNoOfRolls(0);\n\n  const startConfettis = () => {\n    leftConfettiRef.current.start();\n    rightConfettiRef.current.start();\n  };\n\n  const onPress_NewGame_or_Roll = () => {\n    CheckIfAllDicesAreTheSame() ? onPressNewGame() : onPressRoll();\n  };\n\n  const onPressRoll = () => {\n    Utils.PlaySound(Sounds.Roll_Dice);\n    const selectedDices = getSelectedDices();\n    if (selectedDices.length > 0) {\n      increaseNoOfRolls();\n    }\n    setAllDices((oldDice) =>\n      oldDice.map((die) => (die.isSelected ? die : CreateANewDice()))\n    );\n  };\n\n  const onPressNewGame = () => {\n    setAllDices(SetNewDices());\n    resetTimer();\n  };\n\n  const onPressDie = ({ id, title }) => {\n    if (CheckIfAllDicesAreTheSame()) return;\n    Utils.PlaySound(Sounds.Dice_Click);\n    const [firstSelectedDice] = allDices.filter(({ isSelected }) => isSelected);\n    if (firstSelectedDice) {\n      if (title !== firstSelectedDice.title) return;\n    }\n    setAllDices((oldDices) =>\n      oldDices.map((die) =>\n        die.id === id ? { ...die, isSelected: !die.isSelected } : die\n      )\n    );\n  };\n\n  const CheckIfAllDicesAreTheSame = () => {\n    const allSelected = allDices.every((die) => die.isSelected);\n    const firstValue = allDices[0].title;\n    const allSame = allDices.every((die) => die.title === firstValue);\n    return allSelected && allSame;\n  };\n\n  const GetDiceElements = () => {\n    const diceElements = allDices.map(({ id, title, isSelected }, index) => (\n      <Dice\n        key={id}\n        title={title}\n        isSelected={isSelected}\n        onPress={() => onPressDie(allDices[index])}\n        diceType={diceType}\n      />\n    ));\n\n    let splittedArrays = [];\n    if (Utils.IsOnWeb()) {\n      splittedArrays = Utils.SplitArray(diceElements, 2);\n    } else {\n      splittedArrays = Utils.SplitArray(diceElements, 4);\n    }\n    splittedArrays = Utils.SplitArray(diceElements, noOfRows);\n    return splittedArrays;\n  };\n\n  const onLayoutRootView = (l) => {\n    const { width } = l.nativeEvent.layout;\n    if (width <= 480) {\n      setNoOfRows(4);\n    } else if (width > 480 && width <= 720) {\n      setNoOfRows(3);\n    } else if (width > 720) {\n      setNoOfRows(2);\n    }\n  };\n\n  //Rolls count does not work if we use SpaceBar to roll the dices.\n  // if (Utils.IsOnWeb()) {\n  //   const { useHotkeys } = require(\"react-hotkeys-hook\");\n  //   useHotkeys(\"space\", onPress_NewGame_or_Roll);\n  // }\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: Colors.Primary,\n      }}\n      onLayout={onLayoutRootView}\n    >\n      <View\n        style={{\n          justifyContent: \"center\",\n          width: \"90%\",\n        }}\n      >\n        <View style={{ margin: 12 }}>\n          <Text\n            style={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: 50 }}\n          >\n            Tenzies\n          </Text>\n          <Text\n            style={{\n              textAlign: \"center\",\n              fontWeight: \"bold\",\n              fontSize: 20,\n              marginTop: 8,\n            }}\n          >\n            Roll until all dice are the same.{\"\\n\"}Click each die to freeze it\n            at its current value between rolls.\n          </Text>\n          <View style={{ marginTop: 12 }}>\n            <Text\n              style={{ textAlign: \"center\", fontSize: 28, fontWeight: \"bold\" }}\n            >\n              {Utils.GetTimerText({ tHours, tMinutes, tSeconds })}\n            </Text>\n          </View>\n        </View>\n\n        <View style={{ alignItems: \"center\" }}>\n          {GetDiceElements().map((dices, i) => (\n            <View\n              style={{\n                flexDirection: \"row\",\n                justifyContent: \"space-around\",\n                marginVertical: 8,\n                minWidth: Utils.IsOnWeb() ? 400 : \"100%\",\n                maxWidth: 650,\n                width: \"100%\",\n              }}\n              key={`${i}`}\n            >\n              {dices}\n            </View>\n          ))}\n        </View>\n\n        <Text\n          style={{\n            textAlign: \"center\",\n            fontSize: 28,\n            fontWeight: \"bold\",\n            marginTop: 12,\n          }}\n        >\n          {noOfRolls} Rolls\n        </Text>\n\n        <View\n          style={{\n            overflow: \"hidden\",\n            borderRadius: 12,\n            marginTop: 20,\n            width: \"100%\",\n            maxWidth: 615,\n            alignSelf: \"center\",\n          }}\n        >\n          <TouchableRipple\n            style={{\n              borderRadius: 12,\n              backgroundColor: Colors.ButtonBG,\n              height: 60,\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n            onPress={onPress_NewGame_or_Roll}\n          >\n            <Text style={{ color: \"white\", fontSize: 30, fontWeight: \"bold\" }}>\n              {CheckIfAllDicesAreTheSame() ? \"New Game\" : \"ROLL\"}\n            </Text>\n          </TouchableRipple>\n        </View>\n      </View>\n      {CheckIfAllDicesAreTheSame() && (\n        <>\n          <ConfettiCannon\n            count={50}\n            origin={{ x: 100, y: 100 }}\n            autoStart={true}\n            ref={leftConfettiRef}\n            onAnimationEnd={startConfettis}\n            fadeOut={true}\n          />\n          <ConfettiCannon\n            count={50}\n            origin={{ x: Dimensions.get(\"window\").width - 100, y: 100 }}\n            autoStart={true}\n            ref={rightConfettiRef}\n            onAnimationEnd={startConfettis}\n            fadeOut={true}\n          />\n        </>\n      )}\n      <View\n        style={{\n          position: \"absolute\",\n          top: 38,\n          right: 0,\n          backgroundColor: Colors.Highlight,\n          borderTopLeftRadius: 12,\n          borderBottomLeftRadius: 12,\n          overflow: \"hidden\",\n        }}\n      >\n        <IconButton\n          icon={\"cog\"}\n          color={Colors.ButtonBG}\n          style={{ margin: 0, marginRight: 12 }}\n          size={30}\n          onPress={() => setIsSettingsVisible(true)}\n        />\n      </View>\n      <View\n        style={{\n          position: \"absolute\",\n          top: 38,\n          left: 0,\n          backgroundColor: Colors.Highlight,\n          borderTopRightRadius: 12,\n          borderBottomRightRadius: 12,\n          overflow: \"hidden\",\n        }}\n      >\n        <IconButton\n          icon={\"trophy\"}\n          color={Colors.ButtonBG}\n          style={{ margin: 0, marginLeft: 12 }}\n          size={30}\n          onPress={() => setIsScoresVisible(true)}\n        />\n      </View>\n      <ScoresModal\n        isVisible={isScoresVisible}\n        onDismiss={() => setIsScoresVisible(false)}\n      />\n      <SettingsModal\n        isVisible={isSettingsVisible}\n        onDismiss={() => setIsSettingsVisible(false)}\n      />\n    </View>\n  );\n};\n\nexport default Main;\n","import { useEffect, useState } from \"react\";\nimport { View, Image } from \"react-native\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { Provider as PaperProvider, DefaultTheme } from \"react-native-paper\";\nimport * as SplashScreen from \"expo-splash-screen\";\n\nimport Main from \"./src/Main\";\nimport Utils from \"./src/common/Utils\";\nimport { Colors, Images } from \"./src/common/Const\";\nimport { LoadLocallyCachedState } from \"./src/common/GlobalState\";\n\nconst theme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: Colors.Primary,\n    accent: Colors.Accent,\n  },\n};\n\nconst App = () => {\n  const [isGlobalStateLoaded, setIsGlobalStateLoaded] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      await SplashScreen.preventAutoHideAsync();\n      await LoadLocallyCachedState();\n      await Utils.Sleep(2);\n      setIsGlobalStateLoaded(true)\n      await SplashScreen.hideAsync();\n    })()\n  }, [])\n\n  if (!isGlobalStateLoaded)\n    return (\n      <View style={{ flex: 1, backgroundColor: Colors.Primary }}>\n        <Image\n          source={Images.Splash}\n          style={{ height: \"100%\", width: \"100%\" }}\n          resizeMode={\"contain\"}\n        />\n      </View>\n    );\n\n  return (\n    <PaperProvider theme={theme}>\n      <Main />\n      <StatusBar style=\"auto\" />\n    </PaperProvider>\n  )\n};\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/Roll_Dice.cb9e941e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Dice_Click.e8c6c391.wav\";","module.exports = __webpack_public_path__ + \"static/media/Game_Finished.9b5b1a62.wav\";","module.exports = __webpack_public_path__ + \"static/media/splash.32214774.png\";"],"sourceRoot":""}